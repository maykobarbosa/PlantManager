{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/home/mayko/\\xC1rea de Trabalho/React/PlantManager/src/pages/PlantSelect.tsx\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useEffect, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport api from \"../assets/api\";\nimport { EnviromentButton } from \"../components/EnviromentButton\";\nimport { Header } from \"../components/Header\";\nimport { PlantCardPrimary } from \"../components/PlantCardPrimary\";\nimport colors from \"../styles/colors\";\nimport fonts from \"../styles/fonts\";\nexport function PlantSelect() {\n  var _this = this;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      enviroments = _useState2[0],\n      setEnviroments = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      plants = _useState4[0],\n      setPlants = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      filteredPlants = _useState6[0],\n      setFilteredPlants = _useState6[1];\n\n  useEffect(function () {\n    function fetchEnviroment() {\n      var _await$api$get, data;\n\n      return _regeneratorRuntime.async(function fetchEnviroment$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(api.get('plants_environments'));\n\n            case 2:\n              _await$api$get = _context.sent;\n              data = _await$api$get.data;\n              setEnviroments([{\n                key: 'all',\n                title: 'Todos'\n              }].concat(_toConsumableArray(data)));\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n\n    fetchEnviroment();\n  }, []);\n  useEffect(function () {\n    function fetchPlants() {\n      var _await$api$get2, data;\n\n      return _regeneratorRuntime.async(function fetchPlants$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regeneratorRuntime.awrap(api.get(\"plants?_sort=name&_order=asc\"));\n\n            case 2:\n              _await$api$get2 = _context2.sent;\n              data = _await$api$get2.data;\n              setPlants(data);\n              setFilteredPlants(data);\n\n            case 6:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n\n    fetchPlants();\n  }, []);\n  return React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  }, React.createElement(View, {\n    style: styles.header,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }\n  }, React.createElement(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 17\n    }\n  }), React.createElement(Text, {\n    style: styles.title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 17\n    }\n  }, \"Em qual ambiente\"), React.createElement(Text, {\n    style: styles.subtitle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 17\n    }\n  }, \"voc\\xEA que sua planta\")), React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }\n  }, React.createElement(FlatList, {\n    data: enviroments,\n    renderItem: function renderItem(_ref) {\n      var item = _ref.item;\n      return React.createElement(EnviromentButton, {\n        title: item.title,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 21\n        }\n      });\n    },\n    horizontal: true,\n    showsHorizontalScrollIndicator: false,\n    contentContainerStyle: styles.enviromentList,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }\n  })), React.createElement(View, {\n    style: styles.plants,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }\n  }, React.createElement(FlatList, {\n    data: plants,\n    renderItem: function renderItem(_ref2) {\n      var item = _ref2.item;\n      return React.createElement(PlantCardPrimary, {\n        data: item,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 25\n        }\n      });\n    },\n    showsHorizontalScrollIndicator: false,\n    numColumns: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 17\n    }\n  })));\n}\n;\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: colors.background\n  },\n  header: {\n    paddingHorizontal: 20\n  },\n  title: {\n    fontSize: 17,\n    color: colors.heading,\n    fontFamily: fonts.heading,\n    lineHeight: 20,\n    marginTop: 15\n  },\n  subtitle: {\n    fontSize: 17,\n    color: colors.heading,\n    fontFamily: fonts.text,\n    lineHeight: 20\n  },\n  enviromentList: {\n    height: 40,\n    justifyContent: 'center',\n    paddingBottom: 5,\n    marginLeft: 32,\n    marginVertical: 32\n  },\n  plants: {\n    flex: 1,\n    paddingHorizontal: 32,\n    justifyContent: 'center'\n  }\n});","map":{"version":3,"sources":["/home/mayko/√Årea de Trabalho/React/PlantManager/src/pages/PlantSelect.tsx"],"names":["React","useEffect","useState","api","EnviromentButton","Header","PlantCardPrimary","colors","fonts","PlantSelect","enviroments","setEnviroments","plants","setPlants","filteredPlants","setFilteredPlants","fetchEnviroment","get","data","key","title","fetchPlants","styles","container","header","subtitle","item","enviromentList","StyleSheet","create","flex","backgroundColor","background","paddingHorizontal","fontSize","color","heading","fontFamily","lineHeight","marginTop","text","height","justifyContent","paddingBottom","marginLeft","marginVertical"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport {\n    View,\n    Text,\n    StyleSheet,\n    FlatList\n} from 'react-native';\nimport { color } from 'react-native-reanimated';\nimport api from '../assets/api';\nimport { EnviromentButton } from '../components/EnviromentButton';\n\n\n\nimport {Header} from '../components/Header';\nimport { PlantCardPrimary } from '../components/PlantCardPrimary';\nimport colors from '../styles/colors';\nimport fonts from '../styles/fonts';\n\ninterface EnviromentProps {\n    key: string;\n    title: string;\n}\ninterface PlantProps {\n    id: string;\n    name: string;\n    about: string;\n    water_tips: string;\n    photo: string;\n    environments: [string];\n    frequency: {\n      times: number;\n      repeat_every: string;\n}\n}\nexport function PlantSelect(){\n\n    const [enviroments, setEnviroments] = useState<EnviromentProps[]>([]);\n    const [plants, setPlants] = useState<PlantProps[]>([]);\n    const [filteredPlants, setFilteredPlants] = useState<PlantProps[]>([]);\n\n    useEffect(() => {\n        async function fetchEnviroment() {\n            const { data } = await api.get('plants_environments');\n            setEnviroments([\n                {\n                key: 'all',\n                title: 'Todos',\n            },\n                ...data   \n        ]);\n        }\n\n        fetchEnviroment();\n    },[]);\n\n    useEffect(() => {\n        async function fetchPlants() {\n          const { data } = await api.get(`plants?_sort=name&_order=asc`);\n      \n          setPlants(data)\n          setFilteredPlants(data)\n        }\n        \n        fetchPlants()\n      }, []);\n\n    return (\n        <View style={styles.container}>\n            <View style={styles.header}>\n                <Header />\n\n                <Text style={styles.title} >Em qual ambiente</Text>\n                <Text style={styles.subtitle} >voc√™ que sua planta</Text>\n            </View>\n            <View>\n            <FlatList\n                data={enviroments}\n                renderItem={({ item }) => (\n                    <EnviromentButton title={item.title} />\n                )}\n                horizontal\n                showsHorizontalScrollIndicator={false}\n                contentContainerStyle={styles.enviromentList}\n                />\n            </View>\n            <View style={styles.plants}>\n                <FlatList \n                    data={plants}\n                    renderItem={({ item }) => (\n                        <PlantCardPrimary data={item} />\n                    )}\n                    showsHorizontalScrollIndicator={false}\n                    numColumns={2}\n                />\n            </View>\n        </View>\n    )\n};\n\nconst styles = StyleSheet.create({\n    container:{\n        flex: 1,\n        backgroundColor: colors.background\n    },\n    header:{\n        paddingHorizontal: 20\n    },\n    title:{\n        fontSize: 17,\n        color: colors.heading,\n        fontFamily: fonts.heading,\n        lineHeight: 20,\n        marginTop: 15\n    },\n    subtitle:{\n        fontSize: 17,\n        color: colors.heading,\n        fontFamily: fonts.text,\n        lineHeight: 20,\n    },\n    enviromentList:{\n        height: 40,\n        justifyContent: 'center',\n        paddingBottom: 5,\n        marginLeft: 32,\n        marginVertical: 32\n\n    },\n    plants:{\n        flex: 1,\n        paddingHorizontal: 32,\n        justifyContent: 'center'\n    }\n});"]},"metadata":{},"sourceType":"module"}